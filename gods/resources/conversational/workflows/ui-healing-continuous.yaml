name: ui-healing-continuous
version: 1.0.0
description: Continuous UI improvement pipeline with automated healing and multi-agent orchestration
type: continuous

# Workflow Configuration
config:
  schedule:
    automatic:
      - trigger: pull_request
        condition: "files_changed.includes('src/**/*.{tsx,ts,css}')"
      - trigger: push
        condition: "branch == 'main'"
      - trigger: cron
        expression: "0 0 * * 1"  # Weekly on Mondays
    manual:
      - command: "/ui-improve"
      - command: "/ui-score"
  
  thresholds:
    blocking_score: 6.0     # PR blocks below this
    warning_score: 7.5      # Shows warning
    target_score: 8.5       # Ideal score
    excellence_score: 9.0   # Exceptional quality

# Agent Orchestration
agents:
  - id: vision
    role: Extract design tokens from current UI
    when: "workflow.stage == 'analysis' && !style_guide.exists"
  
  - id: fusion
    role: Optimize tokens for target audience
    when: "workflow.stage == 'optimization' && style_guide.exists"
  
  - id: motion
    role: Enhance interactivity
    when: "workflow.stage == 'enhancement' && score.interactivity < 7"
  
  - id: voice
    role: Improve microcopy consistency
    when: "workflow.stage == 'enhancement' && score.microcopy < 8"
  
  - id: pixel
    role: Validate and heal UI issues
    when: "workflow.stage == 'validation'"
  
  - id: apollo
    role: UX oversight and guidance
    when: "workflow.stage == 'planning' || issues.severity == 'critical'"

# Workflow Stages
stages:
  - name: capture
    description: Capture current UI state
    steps:
      - id: screenshot_all
        action: capture_screenshots
        config:
          viewports:
            - width: 375
              height: 667
              name: mobile
            - width: 768
              height: 1024
              name: tablet
            - width: 1440
              height: 900
              name: desktop
          pages:
            - path: "/"
              name: home
            - path: "/dashboard"
              name: dashboard
            - path: "/settings"
              name: settings
          states:
            - default
            - hover
            - focus
            - loading
            - error
            - empty
          output: ".claude/ui-analysis/screenshots/{timestamp}"
      
      - id: extract_styles
        action: extract_computed_styles
        config:
          elements:
            - buttons
            - inputs
            - cards
            - navigation
            - modals
          properties:
            - colors
            - typography
            - spacing
            - borders
            - shadows
          output: ".claude/ui-analysis/styles/{timestamp}"
      
      - id: extract_strings
        action: extract_ui_strings
        config:
          sources:
            - "src/**/*.{tsx,ts}"
            - "locales/**/*.json"
          categorize:
            - buttons
            - labels
            - messages
            - placeholders
            - tooltips
          output: ".claude/ui-analysis/strings/{timestamp}"

  - name: analysis
    description: Analyze current UI quality
    steps:
      - id: vision_analysis
        agent: vision
        action: analyze_visual_patterns
        inputs:
          screenshots: "{capture.screenshot_all.output}"
          styles: "{capture.extract_styles.output}"
        outputs:
          style_guide: ".claude/style-guide/current.md"
          tokens: ".claude/style-guide/tokens.json"
      
      - id: pixel_scoring
        agent: pixel
        action: comprehensive_ui_scoring
        inputs:
          screenshots: "{capture.screenshot_all.output}"
          style_guide: "{vision_analysis.style_guide}"
          ux_rules: ".claude/templates/ux-rules.yaml"
        outputs:
          score_report: ".claude/ui-analysis/score-report.md"
          issues_list: ".claude/ui-analysis/issues.json"
      
      - id: voice_audit
        agent: voice
        action: audit_microcopy
        inputs:
          strings: "{capture.extract_strings.output}"
          brand_guide: ".claude/templates/brand-voice.yaml"
        outputs:
          voice_report: ".claude/ui-analysis/voice-audit.md"
          consistency_score: "{score.microcopy}"

  - name: planning
    description: Plan improvements based on analysis
    steps:
      - id: prioritize_issues
        action: issue_prioritization
        inputs:
          issues: "{pixel_scoring.issues_list}"
          score_report: "{pixel_scoring.score_report}"
        config:
          criteria:
            - user_impact
            - implementation_effort
            - performance_impact
            - business_value
        outputs:
          priority_list: ".claude/ui-analysis/priorities.json"
      
      - id: apollo_review
        agent: apollo
        action: ux_improvement_plan
        condition: "score.overall < 7.5 || issues.critical > 0"
        inputs:
          analysis: "{analysis.*}"
          priorities: "{prioritize_issues.priority_list}"
        outputs:
          improvement_plan: ".claude/ui-analysis/improvement-plan.md"

  - name: optimization
    description: Optimize design tokens for audience
    steps:
      - id: audience_analysis
        agent: fusion
        action: analyze_target_audience
        inputs:
          product_context: ".claude/product/context.md"
          user_research: ".claude/research/users.md"
        outputs:
          audience_profile: ".claude/ui-analysis/audience.json"
      
      - id: token_fusion
        agent: fusion
        action: optimize_design_tokens
        inputs:
          base_tokens: "{vision_analysis.tokens}"
          audience: "{audience_analysis.audience_profile}"
          psychology_principles: true
        outputs:
          optimized_tokens: ".claude/style-guide/tokens-optimized.json"
          rationale: ".claude/style-guide/fusion-rationale.md"

  - name: enhancement
    description: Enhance UI with improvements
    steps:
      - id: motion_enhancement
        agent: motion
        action: add_micro_interactions
        condition: "score.interactivity < 7"
        inputs:
          screens: "{capture.screenshot_all.output}"
          tokens: "{token_fusion.optimized_tokens}"
          performance_budget:
            bundle_size: "10kb"
            animation_fps: 60
        outputs:
          interaction_specs: ".claude/enhancements/interactions.md"
          code_snippets: ".claude/enhancements/motion-code.js"
      
      - id: voice_enhancement
        agent: voice
        action: rewrite_microcopy
        condition: "score.microcopy < 8"
        inputs:
          current_strings: "{capture.extract_strings.output}"
          voice_guide: ".claude/templates/brand-voice.yaml"
          audience: "{audience_analysis.audience_profile}"
        outputs:
          improved_strings: ".claude/enhancements/strings-improved.json"
          voice_guidelines: ".claude/enhancements/voice-guide.md"

  - name: implementation
    description: Generate implementation code
    steps:
      - id: generate_patches
        action: create_code_patches
        inputs:
          motion_specs: "{motion_enhancement.code_snippets}"
          voice_strings: "{voice_enhancement.improved_strings}"
          token_updates: "{token_fusion.optimized_tokens}"
        outputs:
          patches: ".claude/patches/{timestamp}/"
          implementation_guide: ".claude/patches/guide.md"
      
      - id: validate_patches
        action: test_patches
        inputs:
          patches: "{generate_patches.patches}"
        config:
          tests:
            - visual_regression
            - performance_impact
            - accessibility_check
            - browser_compatibility
        outputs:
          validation_report: ".claude/patches/validation.md"

  - name: validation
    description: Final validation and scoring
    steps:
      - id: apply_patches
        action: apply_changes
        condition: "mode == 'auto_heal' && validation.passed"
        inputs:
          patches: "{generate_patches.patches}"
          branch: "ui-healing/{timestamp}"
      
      - id: final_scoring
        agent: pixel
        action: comprehensive_ui_scoring
        inputs:
          implementation: "{apply_patches.result || 'simulated'}"
        outputs:
          final_score: ".claude/ui-analysis/final-score.json"
          comparison: ".claude/ui-analysis/before-after.md"
      
      - id: generate_report
        action: create_final_report
        inputs:
          all_outputs: "{stages.*}"
        outputs:
          report: ".claude/reports/ui-improvement-{timestamp}.md"
          metrics: ".claude/reports/metrics-{timestamp}.json"

# Integration Hooks
integrations:
  github:
    pr_comment:
      template: |
        ## ðŸŽ¨ UI Quality Report
        
        **Overall Score: {final_score.overall}/10** {emoji}
        
        ### Scores by Category:
        - Visual Consistency: {final_score.visual}/10
        - Interactivity: {final_score.interactivity}/10
        - Microcopy: {final_score.microcopy}/10
        - Accessibility: {final_score.accessibility}/10
        
        ### {issues.count} Issues Found:
        - ðŸ”´ Critical: {issues.critical}
        - ðŸŸ¡ Major: {issues.major}
        - ðŸ”µ Minor: {issues.minor}
        
        ### Improvements Applied:
        {improvements.summary}
        
        [View Full Report]({report.url})
    
    checks:
      - name: "UI Quality"
        status: "{final_score.overall >= thresholds.blocking_score ? 'success' : 'failure'}"
        summary: "Score: {final_score.overall}/10"
  
  slack:
    notifications:
      - channel: "#design-system"
        condition: "final_score.overall < thresholds.warning_score"
        message: |
          :warning: UI Quality Alert
          Score dropped to {final_score.overall}/10
          {issues.critical} critical issues detected
          
          <{report.url}|View Report>
      
      - channel: "#team-wins"
        condition: "final_score.overall >= thresholds.excellence_score"
        message: |
          :trophy: UI Excellence Achieved!
          Score: {final_score.overall}/10
          
          Great work team! :tada:

# Automation Rules
automation:
  auto_heal:
    enabled: true
    conditions:
      - "issues.severity == 'minor'"
      - "patches.risk == 'low'"
      - "validation.passed == true"
    require_approval:
      - "issues.severity >= 'major'"
      - "patches.risk >= 'medium'"
      - "performance_impact > 5%"
  
  progressive_enhancement:
    enabled: true
    strategy: "incremental"
    batch_size: 5
    rollback_on_failure: true

# Reporting
reporting:
  dashboards:
    - name: "UI Quality Trends"
      metrics:
        - score_over_time
        - issues_by_category
        - healing_success_rate
        - performance_impact
    
    - name: "Agent Performance"
      metrics:
        - improvements_by_agent
        - execution_time
        - success_rate
        - value_delivered
  
  alerts:
    - name: "Quality Degradation"
      condition: "score_delta < -0.5"
      severity: "high"
    
    - name: "Healing Failure"
      condition: "auto_heal.failed_count > 3"
      severity: "medium"

# Success Metrics
metrics:
  quality:
    - name: "Average UI Score"
      target: ">= 8.5"
      measure: "mean(scores.overall)"
    
    - name: "Critical Issues"
      target: "== 0"
      measure: "count(issues.critical)"
  
  efficiency:
    - name: "Auto-heal Success Rate"
      target: ">= 90%"
      measure: "healed / attempted * 100"
    
    - name: "Time to Resolution"
      target: "< 2 hours"
      measure: "mean(issue.resolved_time - issue.detected_time)"
  
  impact:
    - name: "User Satisfaction"
      target: ">= 4.5/5"
      measure: "survey.ui_satisfaction"
    
    - name: "Performance Maintained"
      target: "< 5% degradation"
      measure: "performance.after / performance.before"